{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/Feedback/Feedback.js","App/App.js","index.js"],"names":["PropTypes","Statistics","good","number","isRequired","neutral","bad","total","positivePercentage","FeedbackOptions","onClickFeedbackChange","func","option","object","Object","keys","map","button","name","onClick","Section","title","string","Notification","messege","Feedback","e","props","target","this","stateValues","Component","App","state","setState","prevState","procentOfPositiveFeedbacks","Math","round","sum","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAcAA,IAAUC,WAAa,CACrBC,KAAMF,IAAUG,OAAOC,WACvBC,QAASL,IAAUG,OAAOC,WAC1BE,IAAKN,IAAUG,OAAOC,WACtBG,MAAOP,IAAUG,OAAOC,WACxBI,mBAAoBR,IAAUG,OAAOC,YAExBH,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMG,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OAEM,+BACE,uCAAUN,KACV,0CAAaG,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCCVR,IAAUS,gBAAkB,CAC1BC,sBAAuBV,IAAUW,KAAKP,WACtCQ,OAAQZ,IAAUa,OAAOT,YAEZK,MAbf,YAA6D,IAAlCC,EAAiC,EAAjCA,sBAAuBE,EAAU,EAAVA,OAChD,OACQ,8BACGE,OAAOC,KAAKH,GAAQI,KAAI,SAAAC,GAAM,OAEzB,wBAAQC,KAAMD,EAAQE,QAAST,EAA/B,SAAoEO,GAATA,SCI7EjB,IAAUoB,QAAU,CAClBC,MAAOrB,IAAUsB,OAAOlB,YAEXgB,MAZf,YAA6B,IAAVC,EAAS,EAATA,MACjB,OACC,8BACG,6BAAKA,OCHI,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OACE,+BAAQA,IAGZxB,IAAUuB,aAAe,CACvBC,QAASxB,IAAUsB,OAAOlB,Y,ICAPqB,E,4MAGnBf,sBAAwB,SAACgB,GACrB,EAAKC,MAAMjB,sBAAsBgB,EAAEE,OAAOV,O,4CAE9C,WACE,MAAwDW,KAAKF,MAAtDzB,EAAP,EAAOA,KAAMG,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,IAAKC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,mBAClC,OACE,gCACI,cAAC,EAAD,CAASa,MAAM,0BACf,cAAC,EAAD,CACEX,sBAAuBmB,KAAKnB,sBAC5BE,OAAQiB,KAAKF,MAAMG,cAGrB,cAAC,EAAD,CAAST,MAAM,eAGH,IAAVd,EAEA,cAACgB,EAAD,CACAC,QAAQ,yBAER,cAAC,EAAD,CACEtB,KAAMA,EACNG,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,W,SA7BIuB,WAqCtC/B,IAAUyB,SAAW,CACnBvB,KAAMF,IAAUG,OAAOC,WACvBC,QAASL,IAAUG,OAAOC,WAC1BE,IAAKN,IAAUG,OAAOC,WACtBG,MAAOP,IAAUG,OAAOC,WACxBI,mBAAoBR,IAAUG,OAAOC,WACrCM,sBAAuBV,IAAUW,KAAKP,Y,IC/ClC4B,E,4MACJC,MAAQ,CACN/B,KAAM,EACNG,QAAS,EACTC,IAAK,G,EAITI,sBAAwB,SAACQ,GAAD,OACV,EAAKgB,UAAS,SAAAC,GAAS,sBACVjB,EAAOiB,EAAUjB,GAAQ,O,4CAElD,WAEE,MAA+BW,KAAKI,MAA5B/B,EAAR,EAAQA,KAAMG,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEjB8B,EAA6BC,KAAKC,MAAMpC,GAAMA,EAAOG,EAAUC,GAAO,KACtEiC,EAAMrC,EAAOG,EAAUC,EAE7B,OACE,8BACE,cAAC,EAAD,CAAUwB,YAAaD,KAAKI,MAAO/B,KAAMA,EAAMG,QAASA,EAASC,IAAKA,EAAKC,MAAOgC,EAAK/B,mBAAoB4B,EAA4B1B,sBAAwBmB,KAAKnB,8B,GArB1JqB,aA2BHC,ICxBfQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.48fbe614.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    \n        <ul>\n          <li>Good:{good }</li>\n          <li>Neutral:{neutral}</li>\n          <li>Bad:{bad}</li>\n          <li>Total:{total}</li>\n          <li>Positive Feedback:{positivePercentage}%</li>\n        </ul>\n    \n  )\n}\nPropTypes.Statistics = {\n  good: PropTypes.number.isRequired, \n  neutral: PropTypes.number.isRequired, \n  bad: PropTypes.number.isRequired, \n  total: PropTypes.number.isRequired, \n  positivePercentage: PropTypes.number.isRequired,\n}\nexport default Statistics;","import PropTypes from 'prop-types'\nfunction FeedbackOptions({ onClickFeedbackChange, option }) {\n  return (\n          <div>\n            {Object.keys(option).map(button =>\n            \n                  <button name={button} onClick={onClickFeedbackChange} key={button}>{button}</button>)}\n          </div>\n        )\n}\nPropTypes.FeedbackOptions = {\n  onClickFeedbackChange: PropTypes.func.isRequired,\n  option: PropTypes.object.isRequired,\n}\nexport default FeedbackOptions","import PropTypes from 'prop-types'\nfunction Section({ title }) {\n  return (\n   <div>\n      <h2>{title}</h2>\n      \n   </div>\n  )\n}\n\nPropTypes.Section = {\n  title: PropTypes.string.isRequired,\n}\nexport default Section","import PropTypes from 'prop-types'\nexport default function Notification({ messege }) {\n  return (\n    <span>{ messege}</span>\n  )\n}\nPropTypes.Notification = {\n  messege: PropTypes.string.isRequired,\n}","\nimport Statistics from '../Statistics'\nimport FeedbackOptions from '../FeedbackOptions'\nimport Section from '../Section'\nimport Notification from '../Notification'\nimport PropTypes from 'prop-types';\nimport { Component } from 'react/cjs/react.development';\nexport default class Feedback extends Component {\n\n\n  onClickFeedbackChange = (e) => {\n      this.props.onClickFeedbackChange(e.target.name)\n  }\n  render(){\n    const {good, neutral, bad, total, positivePercentage} = this.props\n    return (\n      <div>\n          <Section title='Please leave feedback'/>\n          <FeedbackOptions \n            onClickFeedbackChange={this.onClickFeedbackChange} \n            option={this.props.stateValues}\n          />\n\n          <Section title='Statistics' />\n\n          { \n            total === 0 \n            ?\n            <Notification \n            messege='There is no feedback'/>\n            :\n            <Statistics \n              good={good} \n              neutral={neutral} \n              bad={bad} \n              total={total} \n              positivePercentage={positivePercentage}\n            />\n          }\n         \n      </div>\n    )\n  }\n}\nPropTypes.Feedback = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired, \n  onClickFeedbackChange: PropTypes.func.isRequired,\n}","import { Component } from \"react/cjs/react.production.min\";\n// import shortid from \"shortid\";\nimport Feedback from \"../components/Feedback\";\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n\n  }           \n\nonClickFeedbackChange = (name) => \n              this.setState(prevState => \n                        ({[name]: prevState[name] + 1}))\n            \n  render() {\n    \n    const { good, neutral, bad } = this.state\n\n    const procentOfPositiveFeedbacks = Math.round(good/(good + neutral + bad) * 100)\n    const sum = good + neutral + bad\n\n    return (\n      <div>\n        <Feedback stateValues={this.state} good={good} neutral={neutral} bad={bad} total={sum} positivePercentage={procentOfPositiveFeedbacks} onClickFeedbackChange={ this.onClickFeedbackChange}/>\n      </div>\n    )\n  \n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}